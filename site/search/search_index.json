{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":"<p>pwl_linops</p>"},{"location":"pwl_linops/","title":"pwl_linops","text":""},{"location":"pwl_linops/#documentation-for-pwl_linops","title":"Documentation for <code>pwl_linops</code>","text":"<p>Author: Wang, Yansheng Last updated on Jan. 15, 2025</p> Description <p>This module is to complete PWL linear operations.</p>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_addition","title":"<code>pwl_addition(float_arr_in1, float_arr_in2)</code>","text":"<p>Add up two PWLs based on the time defined in the 1st PWL.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in1</code> <code>array</code> <p>The 1st PWL. An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>float_arr_in2</code> <code>array</code> <p>The 2nd PWL. An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_addition(float_arr_in1, float_arr_in2):\n    \"\"\"Add up two PWLs based on the time defined in the 1st PWL.\n\n    Args:\n        float_arr_in1 (array): The 1st PWL. An array of size (n, 2) with 1st Col. as time in S and\n            2nd Col. as waveform in A or V. Values are float type.\n        float_arr_in2 (array): The 2nd PWL. An array of size (n, 2) with 1st Col. as time in S and\n            2nd Col. as waveform in A or V. Values are float type.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n    \"\"\"\n    float_arr_in2_interp = pwl_interpolation(\n        float_arr_in2, float_arr_in1[:, 0], left=0, right=0\n    )\n    float_arr_out = float_arr_in1.copy()\n    float_arr_out[:, 1] = float_arr_in1[:, 1] + float_arr_in2_interp[:, 1]\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_catenation","title":"<code>pwl_catenation(float_arr_in1, float_arr_in2, gap=None)</code>","text":"<p>Catenate two PWLs. First in first out in time.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in1</code> <code>array</code> <p>The 1st PWL. An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>float_arr_in2</code> <code>array</code> <p>The 2nd PWL. An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>gap</code> <code>float</code> <p>The time specified between the two PWLs. Defaults to None, i.e. the same time step between the 1st and the 2nd samples in the 2nd PWL.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_catenation(float_arr_in1, float_arr_in2, gap=None):\n    \"\"\"Catenate two PWLs. First in first out in time.\n\n    Args:\n        float_arr_in1 (array): The 1st PWL. An array of size (n, 2) with 1st Col. as time in S and\n            2nd Col. as waveform in A or V. Values are float type.\n        float_arr_in2 (array): The 2nd PWL. An array of size (n, 2) with 1st Col. as time in S and\n            2nd Col. as waveform in A or V. Values are float type.\n        gap (float, optional): The time specified between the two PWLs. Defaults to None, i.e.\n            the same time step between the 1st and the 2nd samples in the 2nd PWL.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n\n    \"\"\"\n    if float_arr_in2.size == 0:\n        float_arr_out = float_arr_in1\n    else:\n        if float_arr_in1.size == 0:\n            float_arr_out = float_arr_in2\n        else:\n            if gap is None:\n                gap = float_arr_in2[1, 0] - float_arr_in2[0, 0]\n            # adjust time of the 2nd PWL\n            float_arr_in2[:, 0] = float_arr_in2[:, 0] + float_arr_in1[-1, 0] + gap\n            float_arr_out = np.append(float_arr_in1, float_arr_in2, axis=0)\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_cut","title":"<code>pwl_cut(float_arr_in, clip_start, clip_end)</code>","text":"<p>Cut a slice of PWL.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>clip_start</code> <code>float</code> <p>The starting time of the clip.</p> required <code>clip_end</code> <code>float</code> <p>The ending time of the clip.</p> required <p>Returns:</p> Name Type Description <code>float_arr_center</code> <code>array</code> <p>The center part of the clipped array at a size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> <code>float_arr_pre</code> <code>array</code> <p>The part before the clipped array at a size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> <code>float_arr_post</code> <code>array</code> <p>The part after the clipped array at a size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_cut(float_arr_in, clip_start, clip_end):\n    \"\"\"Cut a slice of PWL.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        clip_start (float): The starting time of the clip.\n        clip_end (float): The ending time of the clip.\n\n    Returns:\n        float_arr_center (array): The center part of the clipped array at a size (n, 2) with 1st\n            Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.\n        float_arr_pre (array): The part before the clipped array at a size (n, 2) with 1st\n            Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.\n        float_arr_post (array): The part after the clipped array at a size (n, 2) with 1st\n            Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.\n\n    \"\"\"\n    float_arr_dt = float_arr_in.copy()\n    # clip center\n    float_arr_index = np.logical_and(\n        float_arr_dt[:, 0] &gt;= clip_start, float_arr_dt[:, 0] &lt;= clip_end\n    )\n    float_arr_center = float_arr_dt[float_arr_index, :]\n    # pre clip\n    float_arr_pre = float_arr_dt[float_arr_dt[:, 0] &lt; clip_start, :]\n    # post clip\n    float_arr_post = float_arr_dt[float_arr_dt[:, 0] &gt; clip_end, :]\n    return float_arr_center, float_arr_pre, float_arr_post\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_extension_by_repeating","title":"<code>pwl_extension_by_repeating(float_arr_in, stop_time, clip_config=None, repeat_config=None, extension_config=None)</code>","text":"<p>Customize the PWL by repeating.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>stop_time</code> <code>float</code> <p>The stop time of a PWL file.</p> required <code>clip_config</code> <code>dict</code> <p>The configuration dictionary for clipping. {     # The starting time of the clip. None: the first time point in PWL.     \"clip_start\": value1 (float) or None,     # The ending time of the clip. None: the last time point in PWL.     \"clip_end\": value2 (float) or None, } Defaults to None.</p> <code>None</code> <code>repeat_config</code> <code>dict</code> <p>The configuration dictionary for repeating. {     # Keep or not the starting part of the PWL other than the repeated part     \"keep_head\": value1 (bool),     # The time specified between the repeated PWLs. None: the same time step between     # the 1st and the 2nd samples in the original PWL.     \"gap\": value2 (float) or None, } Defaults to None.</p> <code>None</code> <code>extension_config</code> <code>dict</code> <p>The configuration dictionary for extension. {     # A delay time before the PWL starts     \"delay\": value1 (float),     # The waveform value before PWL starts. None: the first waveform value in PWL     \"delay_value\": value2 (float) or None,     # The waveform value after PWL ends. None: the last waveform value in PWL     \"stop_value\": value3 (float) or None, } Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_extension_by_repeating(\n    float_arr_in, stop_time, clip_config=None, repeat_config=None, extension_config=None\n):\n    \"\"\"Customize the PWL by repeating.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        stop_time (float): The stop time of a PWL file.\n        clip_config (dict, optional): The configuration dictionary for clipping.\n            {\n                # The starting time of the clip. None: the first time point in PWL.\n                \"clip_start\": value1 (float) or None,\n                # The ending time of the clip. None: the last time point in PWL.\n                \"clip_end\": value2 (float) or None,\n            }\n            Defaults to None.\n        repeat_config (dict, optional): The configuration dictionary for repeating.\n            {\n                # Keep or not the starting part of the PWL other than the repeated part\n                \"keep_head\": value1 (bool),\n                # The time specified between the repeated PWLs. None: the same time step between\n                # the 1st and the 2nd samples in the original PWL.\n                \"gap\": value2 (float) or None,\n            }\n            Defaults to None.\n        extension_config (dict, optional): The configuration dictionary for extension.\n            {\n                # A delay time before the PWL starts\n                \"delay\": value1 (float),\n                # The waveform value before PWL starts. None: the first waveform value in PWL\n                \"delay_value\": value2 (float) or None,\n                # The waveform value after PWL ends. None: the last waveform value in PWL\n                \"stop_value\": value3 (float) or None,\n            }\n            Defaults to None.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n    \"\"\"\n    # config\n    if clip_config is None:\n        clip_start = None\n        clip_end = None\n    else:\n        clip_start = clip_config[\"clip_start\"]\n        clip_end = clip_config[\"clip_end\"]\n    if clip_start is None:\n        clip_start = float_arr_in[0][0]\n    if clip_end is None:\n        clip_end = float_arr_in[-1][0]\n\n    if repeat_config is None:\n        keep_head = True\n        gap = None\n    else:\n        keep_head = repeat_config[\"keep_head\"]\n        gap = repeat_config[\"gap\"]\n\n    if extension_config is None:\n        delay = 0\n        delay_value = None\n        stop_value = None\n    else:\n        delay = extension_config[\"delay\"]\n        delay_value = extension_config[\"delay_value\"]\n        stop_value = extension_config[\"stop_value\"]\n    # clip\n    float_arr_clip, float_arr_pre, _ = pwl_cut(float_arr_in, clip_start, clip_end)\n    # renormalize time range\n    float_arr_clip[:, 0] = float_arr_clip[:, 0] - float_arr_clip[0, 0]\n    if float_arr_pre.size == 0:\n        duration_pre = 0\n    else:\n        float_arr_pre[:, 0] = float_arr_pre[:, 0] - float_arr_pre[0, 0]\n        duration_pre = float_arr_pre[-1, 0] - float_arr_pre[0, 0]\n    if keep_head is False:\n        float_arr_pre = np.array([[]])\n        duration_pre = 0\n    # repeat the clip\n    repeat_time_length = stop_time - delay - duration_pre\n    float_arr_rpt_clip = pwl_repeat_till_stoptime(\n        float_arr_clip, repeat_time_length, gap\n    )\n    # catenate the repeated clip to the pre clip\n    float_arr_cat = pwl_catenation(float_arr_pre, float_arr_rpt_clip)\n    float_arr_out = pwl_mod_time(\n        float_arr_cat, stop_time, delay, stop_value, delay_value\n    )\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_interpolation","title":"<code>pwl_interpolation(float_arr_in, new_time, left=None, right=None)</code>","text":"<p>Interpolate PWL.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>new_time</code> <code>array</code> <p>New sampling time as an array of size (n, 1). Values are float type in S.</p> required <code>left</code> <code>float</code> <p>The left value assumed for time less than the PWL time range. Defaults to None, i.e. the 1st value in original PWL.</p> <code>None</code> <code>right</code> <code>float</code> <p>The right value assumed for time larger than the PWL time range. Defaults to None, i.e. the last value in the original PWL.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_interpolation(float_arr_in, new_time, left=None, right=None):\n    \"\"\"Interpolate PWL.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        new_time (array): New sampling time as an array of size (n, 1). Values are float type in S.\n        left (float, optional): The left value assumed for time less than the PWL time range.\n            Defaults to None, i.e. the 1st value in original PWL.\n        right (float, optional): The right value assumed for time larger than the PWL time range.\n            Defaults to None, i.e. the last value in the original PWL.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n\n    \"\"\"\n    float_arr_out = np.empty((new_time.size, 2))\n    float_arr_out[:, 0] = new_time\n    float_arr_out[:, 1] = np.interp(\n        new_time, float_arr_in[:, 0], float_arr_in[:, 1], left, right\n    )\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_mod_time","title":"<code>pwl_mod_time(float_arr_in, stop_time, delay=0.0, stop_value=None, delay_value=None)</code>","text":"<p>Modify the time range of a PWL file and reset the starting point at time 0.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>stop_time</code> <code>float</code> <p>The stop time of a PWL file.</p> required <code>delay</code> <code>float</code> <p>A delay time before the PWL starts. Defaults to 0.0.</p> <code>0.0</code> <code>stop_value</code> <code>float</code> <p>The waveform value after PWL ends. Defaults to None, i.e. the last waveform value in PWL.</p> <code>None</code> <code>delay_value</code> <code>float</code> <p>The waveform value before PWL starts. Defaults to None, i.e. the first waveform value in PWL.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_mod_time(float_arr_in, stop_time, delay=0.0, stop_value=None, delay_value=None):\n    \"\"\"Modify the time range of a PWL file and reset the starting point at time 0.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        stop_time (float): The stop time of a PWL file.\n        delay (float, optional): A delay time before the PWL starts. Defaults to 0.0.\n        stop_value (float, optional): The waveform value after PWL ends. Defaults to None, i.e. the\n            last waveform value in PWL.\n        delay_value (float, optional): The waveform value before PWL starts. Defaults to None, i.e.\n            the first waveform value in PWL.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n    \"\"\"\n    begin_time = float_arr_in[0][0]\n    end_time = float_arr_in[-1][0]\n    duration = end_time - begin_time\n    # renormalize time range\n    float_arr_dt = float_arr_in.copy()\n    float_arr_dt[:, 0] = float_arr_dt[:, 0] - begin_time\n    # set begin values\n    if delay_value is None:\n        begin_value = float_arr_in[0][1]\n    else:\n        begin_value = delay_value\n    # set end values\n    if stop_value is None:\n        end_value = float_arr_in[-1][1]\n    else:\n        end_value = stop_value\n    # modify the time range\n    float_arr_dt[:, 0] = float_arr_dt[:, 0] + delay\n    float_vec_start = np.array([0, begin_value])\n    float_vec_end = np.array([stop_time, end_value])\n    if stop_time &lt;= delay:\n        float_arr_out = np.array([[0, begin_value], [stop_time, begin_value]])\n    elif stop_time &lt;= delay + duration:\n        float_arr_out_temp = float_arr_dt[float_arr_dt[:, 0] &lt;= stop_time, :]\n        if delay &gt; 0:\n            float_arr_out = np.insert(float_arr_out_temp, 0, float_vec_start, axis=0)\n        else:\n            float_arr_out = float_arr_out_temp\n    else:\n        if delay &gt; 0:\n            float_arr_out = np.insert(float_arr_dt, 0, float_vec_start, axis=0)\n        else:\n            float_arr_out = float_arr_dt\n        float_arr_out = np.append(float_arr_out, [float_vec_end], axis=0)\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_plot","title":"<code>pwl_plot(float_arr_in)</code>","text":"<p>Plot a PWL.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_plot(float_arr_in):\n    \"\"\"Plot a PWL.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n\n    \"\"\"\n    plt.plot(float_arr_in[:, 0], float_arr_in[:, 1])\n    plt.title(\"PWL Profile\")\n    plt.ylabel(\"Waveform\")\n    plt.xlabel(\"Time (S)\")\n    plt.show()\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_read","title":"<code>pwl_read(file_dir, skip_start_line=0, ignore_end_line=0, ignore_symbol='+', unit_scale=None)</code>","text":"<p>Read in a PWL file.</p> <p>Parameters:</p> Name Type Description Default <code>file_dir</code> <code>str</code> <p>Input PWL file directory.</p> required <code>skip_start_line</code> <code>int</code> <p>Number of starting lines to be skipped during read. Defaults to 0.</p> <code>0</code> <code>ignore_end_line</code> <code>int</code> <p>Number of ending lines to be ignored during read. Defaults to 0.</p> <code>0</code> <code>ignore_symbol</code> <code>str</code> <p>One specified character to be ignored during read. Defaults to \"+\", which is typically the starting character in a PWL file from the 2nd line.</p> <code>'+'</code> <code>unit_scale</code> <code>list</code> <p>A list of two unit scales for values in the PWL file. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_read(\n    file_dir, skip_start_line=0, ignore_end_line=0, ignore_symbol=\"+\", unit_scale=None\n):\n    \"\"\"Read in a PWL file.\n\n    Args:\n        file_dir (str): Input PWL file directory.\n        skip_start_line (int, optional): Number of starting lines to be skipped during read.\n            Defaults to 0.\n        ignore_end_line (int, optional): Number of ending lines to be ignored during read.\n            Defaults to 0.\n        ignore_symbol (str, optional): One specified character to be ignored during read.\n            Defaults to \"+\", which is typically the starting character in a PWL file from the 2nd\n            line.\n        unit_scale (list, optional): A list of two unit scales for values in the PWL file.\n            Defaults to None.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n\n    \"\"\"\n    ctnt = txtfile_rd(file_dir)\n    ctnt_list = list_strip(ctnt.split(\"\\n\"))\n    # remove first n lines\n    for _ in range(skip_start_line):\n        ctnt_list.pop(0)\n    # remove last n lines\n    for _ in range(ignore_end_line):\n        ctnt_list.pop(-1)\n    # remove symbol and make it list of list\n    ctnt_lol_tmp = [item.lstrip(ignore_symbol).split() for item in ctnt_list]\n    # check if scale exist\n    scale_exist = check_if_scale_exist(\"\".join(ctnt_list))\n    # convert scale to sci expression if it exists\n    if scale_exist:\n        ctnt_lol = [\n            [convert_value_w_scale(item[0]), convert_value_w_scale(item[1])]\n            for item in ctnt_lol_tmp\n        ]\n    else:\n        ctnt_lol = ctnt_lol_tmp\n    # convert to float type and scale to the right unit\n    ctnt_arr = np.array(ctnt_lol)\n    float_arr = ctnt_arr.astype(np.float64)\n    if unit_scale is None:\n        unit_scale = [1, 1]\n    float_arr[:, 0] = float_arr[:, 0] * unit_scale[0]\n    float_arr[:, 1] = float_arr[:, 1] * unit_scale[1]\n    return float_arr\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_repeat_till_stoptime","title":"<code>pwl_repeat_till_stoptime(float_arr_in, stop_time, gap=None)</code>","text":"<p>Repeat the whole PWL till the stop time and reset the starting point at time 0.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>stop_time</code> <code>float</code> <p>The stop time of a PWL file.</p> required <code>gap</code> <code>float</code> <p>The time specified between the repeated PWLs. Defaults to None, i.e. the same time step between the 1st and the 2nd samples in the original PWL.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_repeat_till_stoptime(float_arr_in, stop_time, gap=None):\n    \"\"\"Repeat the whole PWL till the stop time and reset the starting point at time 0.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        stop_time (float): The stop time of a PWL file.\n        gap (float, optional): The time specified between the repeated PWLs. Defaults to None, i.e.\n            the same time step between the 1st and the 2nd samples in the original PWL.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n\n    \"\"\"\n    begin_time = float_arr_in[0][0]\n    end_time = float_arr_in[-1][0]\n    duration = end_time - begin_time\n    repeat_times = math.ceil(stop_time / duration)\n    float_arr_rpt = pwl_repeat_times(float_arr_in, repeat_times, gap)\n    float_arr_out, _, _ = pwl_cut(float_arr_rpt, 0, stop_time)\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_repeat_times","title":"<code>pwl_repeat_times(float_arr_in, repeat_times, gap=None)</code>","text":"<p>Repeat the whole PWL multiple times and reset the starting point at time 0.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>repeat_times</code> <code>int</code> <p>repeating times of the original PWL.</p> required <code>gap</code> <code>float</code> <p>The time specified between the repeated PWLs. Defaults to None, i.e. the same time step between the 1st and the 2nd samples in the original PWL.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_repeat_times(float_arr_in, repeat_times, gap=None):\n    \"\"\"Repeat the whole PWL multiple times and reset the starting point at time 0.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        repeat_times (int): repeating times of the original PWL.\n        gap (float, optional): The time specified between the repeated PWLs. Defaults to None, i.e.\n            the same time step between the 1st and the 2nd samples in the original PWL.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n\n    \"\"\"\n    begin_time = float_arr_in[0][0]\n    end_time = float_arr_in[-1][0]\n    if gap is None:\n        step = float_arr_in[1][0] - begin_time\n    else:\n        step = gap\n    # renormalize time range\n    float_arr_dt = float_arr_in.copy()\n    float_arr_dt[:, 0] = float_arr_dt[:, 0] - begin_time\n    # repeat\n    float_arr_out = float_arr_dt.copy()\n    for i in range(repeat_times):\n        float_arr_temp = float_arr_dt.copy()\n        float_arr_temp[:, 0] = float_arr_temp[:, 0] + (step + end_time) * (i + 1)\n        float_arr_out = np.append(float_arr_out, float_arr_temp, axis=0)\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_scale_amp","title":"<code>pwl_scale_amp(float_arr_in, scalar=1.0)</code>","text":"<p>Scale the amplitude of a PWL.</p> <p>Parameters:</p> Name Type Description Default <code>float_arr_in</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>scalar</code> <code>float</code> <p>A float number used to scale the amplitude of a PWL. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_scale_amp(float_arr_in, scalar=1.0):\n    \"\"\"Scale the amplitude of a PWL.\n\n    Args:\n        float_arr_in (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        scalar (float, optional): A float number used to scale the amplitude of a PWL.\n            Defaults to 1.0.\n\n    Returns:\n        array: An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n\n    \"\"\"\n    float_arr_out = float_arr_in.copy()\n    float_arr_out[:, 1] = float_arr_out[:, 1] * scalar\n    return float_arr_out\n</code></pre>"},{"location":"pwl_linops/#common_sipi_tools.pwl_linops.pwl_write","title":"<code>pwl_write(file_dir, float_arr, headline='# s A', pwl_def=None, add_symbol='+')</code>","text":"<p>Write out a PWL file.</p> <p>Parameters:</p> Name Type Description Default <code>file_dir</code> <code>str</code> <p>Output PWL file directory.</p> required <code>float_arr</code> <code>array</code> <p>An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as waveform in A or V. Values are float type.</p> required <code>headline</code> <code>str</code> <p>The header info in the output PWL file. Defaults to \"# s A\".</p> <code>'# s A'</code> <code>pwl_def</code> <code>str</code> <p>The PWL definition, e.g. \"Ivdd VDD 0\". Defaults to None.</p> <code>None</code> <code>add_symbol</code> <code>str</code> <p>One specified character to be inserted in front of each line during write. Defaults to \"+\".</p> <code>'+'</code> Source code in <code>common_sipi_tools/pwl_linops.py</code> <pre><code>def pwl_write(file_dir, float_arr, headline=\"# s A\", pwl_def=None, add_symbol=\"+\"):\n    \"\"\"Write out a PWL file.\n\n    Args:\n        file_dir (str): Output PWL file directory.\n        float_arr (array): An array of size (n, 2) with 1st Col. as time in S and 2nd Col. as\n            waveform in A or V. Values are float type.\n        headline (str, optional): The header info in the output PWL file. Defaults to \"# s A\".\n        pwl_def (str, optional): The PWL definition, e.g. \"Ivdd VDD 0\". Defaults to None.\n        add_symbol (str, optional): One specified character to be inserted in front of each line\n            during write. Defaults to \"+\".\n\n    \"\"\"\n    float_lol = float_arr.tolist()\n    str_lst = [f\"{add_symbol} {item[0]:.9e} {item[1]:.9e}\" for item in float_lol]\n    # remove the first + if no pwl definition is provided\n    if pwl_def is None:\n        str_lst[0] = str_lst[0].lstrip(add_symbol).lstrip()\n        pwl_def = \"\"\n        footline = \"\"\n    else:\n        pwl_def = pwl_def + \" pwl(\\n\"\n        footline = \")\"\n    ctnt = headline + \"\\n\" + pwl_def + \"\\n\".join(str_lst) + footline\n    txtfile_wr(file_dir, ctnt)\n</code></pre>"}]}
